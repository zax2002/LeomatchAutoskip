import os
import re

from telethon import events # type: ignore
from telethon.tl.functions.messages import SendReactionRequest # type: ignore
from telethon.types import Message, ReactionEmoji, ReactionEmpty # type: ignore
from opentele.tl import TelegramClient # type: ignore
from opentele.api import API # type: ignore

from datatypes import ActionType
import app


class Bot:
	def __init__(self, app: 'app.App', sessionFile: str):
		self.app = app

		self.sessionFile = sessionFile

		self.profileMessageRegex = re.compile(r"^.*, \d+, (\S+|üìç\d+ km|üìç\d+ –∫–º)( ‚Äì .*|)$", re.S)

	async def start(self):
		os.makedirs(os.path.dirname(self.sessionFile), exist_ok=True)

		self.client = TelegramClient(self.sessionFile,
			api = API.TelegramDesktop(
				app_version="6.0.2 x64"
			)
		)
		await self.client.start()

		self._defineListeners()
		await self.app.console()

		await self.client.run_until_disconnected()

	async def _sendReaction(self, message: Message, emoticon: str):
		if emoticon is None:
			reaction = ReactionEmpty()
		else:
			reaction = ReactionEmoji(emoticon)

		await self.client( SendReactionRequest(
			peer = message.peer_id,
			msg_id = message.id,
			reaction = [reaction]
		))

	def _defineListeners(self):
		@self.client.on(events.MessageEdited(chats=self.app.config["chatId"]))
		async def onMessageEdit(event: events.MessageEdited.Event):
			if not event.message.reactions.recent_reactions is None:
				emoticon = event.message.reactions.recent_reactions[0].reaction.emoticon
			else:
				emoticon = None

			await self.app.onReaction(
				emoticon,
				event.message.message,
				lambda emoticon: self._sendReaction(event.message, emoticon)
			)
				
		@self.client.on(events.NewMessage(chats=self.app.config["chatId"]))
		async def onMessage(event: events.NewMessage.Event):
			# –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ —è —á—ë—Ç–æ –¥–µ–ª–∞—é
			if event.out:
				if event.message.message == "üëé":
					await self.app.onAction(ActionType.DISLIKE)

				elif event.message.message == "‚ù§Ô∏è":
					await self.app.onAction(ActionType.LIKE)

			# –í—Ö–æ–¥—è—â–µ–µ
			else:
				# –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π, —á–µ–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–∫–æ–π
				if self.profileMessageRegex.match(event.message.message):
					await self.app.onProfileRaw(event.message.message, lambda emoticon: self._sendReaction(event.message, emoticon))

				# –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —è –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–∏–ø–∞ —Ç–æ–∂–µ –∏—Å—Ö–æ–¥—è—â–∏–π –ª–∞–π–∫ –∏–≤–µ–Ω—Ç –≤–æ—Ç –¥–∞
				elif event.message.message == "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞.":
					await self.app.onAction(ActionType.LIKE)

				# –ß–µ–∫–∞–µ–º —á—Ç–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ —Å–ø–∞–º
				else:
					spamReply = self.app.checkSpam(event.message.message)
					if not spamReply is None:
						await self.app.message(spamReply)